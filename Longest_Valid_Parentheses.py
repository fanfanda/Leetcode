class Solution:
    def longestValidParentheses(self, s: str) -> int:
        lens = len(s)
        memo = [0 for i in range(lens)]
        res = 0
        for i in range(1, lens):
            if s[i] == ')':
                if s[i - 1] == '(':
                    memo[i] = memo[i - 2] + 2 if i >= 2 else 2
                else:
                    if i - memo[i - 1] > 0 and s[i - memo[i - 1] - 1] == '(':
                        memo[i] = memo[i - 1] + 2 + (memo[i - memo[i - 1] - 2] if i - memo[i - 1] >= 2 else 0)
                res = max(res, memo[i])
        return res
    # def longestValidParentheses(self, s: str) -> int:
    #     res = 0
    #     for i in range(len(s)):
    #         for j in range(i + 1, len(s), 2):
    #             if self.isValid(s[i:j + 1]):
    #                 res = max(res, j - i + 1)
    #     return res
    # def isValid(self, s: str) -> bool:
    #     stack = []
    #     for item in s:
    #         if item == '(': stack.append('(')
    #         elif stack and stack[-1] == '(': stack.pop()
    #         else: return False
    #     if not stack: return True
    #     else: return False


t = Solution()
print(t.longestValidParentheses('((())())(()))(()()(()(()))(()((((()))))))((()())()))()()(()(((((()()()())))()())(()()))((((((())))((()))()()))))(()))())))()))()())((()()))))(()(((((())))))()((()(()(())((((())(())((()()(()())))())(()(())()()))())(()()()))()(((()())(((()()())))(((()()()))(()()))()))()))))))())()()((()(())(()))()((()()()((())))()(((()())(()))())())))(((()))))())))()(())))()())))())()((()))((()))()))(((())((()()()(()((()((())))((()()))())(()()(()))))())((())))(()))()))))))()(()))())(()())))))(()))((())(()((())(((((()()()(()()())))(()())()((()(()()))(()(())((()((()))))))))(()(())()())()(()(()(()))()()()(()()())))(())(()((((()()))())))(())((()(())())))))())()()))(((())))())((()(()))(()()))((())(())))))(()(()((()((()()))))))(()()()(()()()(()(())()))()))(((()(())()())(()))())))(((()))())(()((()))(()((()()()(())()(()())()(())(()(()((((())()))(((()()(((()())(()()()(())()())())(()(()()((()))))()(()))))(((())))()()))(()))((()))))()()))))((((()(())()()()((()))((()))())())(()((()()())))))))()))(((()))))))(()())))(((()))((()))())))(((()(((())))())(()))))(((()(((((((((((((())(((()))((((())())()))())((((())(((())))())(((()))))()())()(())())(()))))()))()()()))(((((())()()((()))())(()))()()(()()))(())(()()))()))))(((())))))((()()(()()()()((())((((())())))))((((((()((()((())())(()((()))(()())())())(()(())(())(()((())((())))(())())))(()()())((((()))))((()(())(()(()())))))))))((()())()()))((()(((()((()))(((((()()()()()(()(()((()(()))(()(()((()()))))()(()()((((((()((()())()))((())()()(((((()(()))))()()((()())((()())()(())((()))()()(()))'))